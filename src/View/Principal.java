package View;

import DAO.LivroDAO;
import DAO.UsuarioDAO;
import Panels.Livro;
import java.awt.ComponentOrientation;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Tiago
 */
public final class Principal extends javax.swing.JFrame {

    private final LivroDAO ldao = new LivroDAO();
    private final UsuarioDAO udao = new UsuarioDAO();
    private final List<Integer> myLivros = new ArrayList<>();
    private final int idUser;
    private final String nome;

    /**
     * Creates new form Principal
     *
     * @param idUsuario
     * @param nome
     */
    public Principal(int idUsuario, String nome) {
        initComponents();
        getTop10();
        this.idUser = idUsuario;
        this.nome = nome;
        getLivrosLidos(idUsuario);
        getGeneros();
        desktop.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        getAcervo();
        desktop.setVisible(true);
        this.setExtendedState(Principal.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        desktop = new javax.swing.JPanel();
        pnFiltro = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTop10 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuSair = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Esse Eu Já Li!");
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        scroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Livros do Acervo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(162, 67, 173))); // NOI18N

        desktop.setLayout(new java.awt.GridLayout(0, 4, 5, 5));
        scroll.setViewportView(desktop);

        pnFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtrar livros por gênero", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(162, 67, 173))); // NOI18N

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos" }));

        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFiltroLayout = new javax.swing.GroupLayout(pnFiltro);
        pnFiltro.setLayout(pnFiltroLayout);
        pnFiltroLayout.setHorizontalGroup(
            pnFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(387, Short.MAX_VALUE))
        );
        pnFiltroLayout.setVerticalGroup(
            pnFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Top 10 Leitores", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(162, 67, 173))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(162, 67, 173));

        tbTop10.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        tbTop10.setForeground(new java.awt.Color(162, 67, 173));
        tbTop10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Posição", "Nome", "Pontos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbTop10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbTop10MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbTop10);
        if (tbTop10.getColumnModel().getColumnCount() > 0) {
            tbTop10.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        jMenu2.setText("Meu Perfil");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        menuSair.setText("Sair");
        menuSair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuSairMouseClicked(evt);
            }
        });
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        jMenuBar1.add(menuSair);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scroll)
                    .addComponent(pnFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (cbFiltro.getSelectedItem().toString().equalsIgnoreCase("Todos")) {
            getAcervo();
        } else {
            filtraAcervo(cbFiltro.getSelectedItem().toString());
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void menuSairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSairMouseClicked
        int dialogResult = JOptionPane.showConfirmDialog(null, "Você quer realmente sair do sistema?", "Aviso", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            Login l = new Login();
            l.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_menuSairMouseClicked

    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed

    }//GEN-LAST:event_menuSairActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        getAcervo();
        getTop10();
    }//GEN-LAST:event_formWindowGainedFocus

    private void tbTop10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTop10MouseClicked

    }//GEN-LAST:event_tbTop10MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        MeuPerfil mp = new MeuPerfil(idUser, nome);
        mp.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JPanel desktop;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuSair;
    private javax.swing.JPanel pnFiltro;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tbTop10;
    // End of variables declaration//GEN-END:variables

    public void getAcervo() {
        desktop.removeAll();
        getLivrosLidos(idUser);
        ResultSet res = ldao.getAcervo();
        List<Livro> lLivro = new ArrayList<>();
        final String html1 = "<html><body align='center' style='width: ";
        final String html2 = "px'>";
        try {
            if (!res.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "Nenhum livro cadastrado no acervo!");
            }
            while (res.next()) {
                //System.out.println(res.getInt("id"));
                try {
                    if (myLivros.contains(res.getInt("id"))) {

                        Livro l = new Livro(res.getInt("id"), html1 + "180" + html2 + res.getString("nome"), res.getString("sinopse"), res.getString("imagem"), res.getInt("paginas"), res.getString("autor"), res.getString("genero"), true, idUser);
                        lLivro.add(l);
                    } else {
                        Livro l = new Livro(res.getInt("id"), html1 + "180" + html2 + res.getString("nome"), res.getString("sinopse"), res.getString("imagem"), res.getInt("paginas"), res.getString("autor"), res.getString("genero"), false, idUser);
                        lLivro.add(l);
                    }
                } catch (Exception e) {
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

        lLivro.stream().forEach((lLivro1) -> {
            desktop.add(lLivro1);
        });
        desktop.updateUI();

    }

    public void getLivrosLidos(int idUsuario) {
        ResultSet res = ldao.getLivrosLidos(idUsuario);
        try {
            while (res.next()) {
                myLivros.add(res.getInt("id"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getGeneros() {
        ResultSet res = ldao.getGeneros();
        try {
            while (res.next()) {
                cbFiltro.addItem(res.getString("nome"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void filtraAcervo(String genero) {
        desktop.removeAll();
        getLivrosLidos(idUser);
        ResultSet res = ldao.getAcervoPorGenero(genero);
        List<Livro> lLivro = new ArrayList<>();
        final String html1 = "<html><body align='center' style='width: ";
        final String html2 = "px'>";
        try {
            if (!res.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "Nenhum livro cadastrado no acervo!");
            }
            while (res.next()) {
                try {
                    if (myLivros.contains(res.getInt("id"))) {
                        Livro l = new Livro(res.getInt("id"), html1 + "180" + html2 + res.getString("nome"), res.getString("sinopse"), res.getString("imagem"), res.getInt("paginas"), res.getString("autor"), res.getString("genero"), true, idUser);
                        lLivro.add(l);
                    } else {
                        Livro l = new Livro(res.getInt("id"), html1 + "180" + html2 + res.getString("nome"), res.getString("sinopse"), res.getString("imagem"), res.getInt("paginas"), res.getString("autor"), res.getString("genero"), false, idUser);
                        lLivro.add(l);
                    }
                } catch (Exception e) {
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        lLivro.stream().forEach((lLivro1) -> {
            desktop.add(lLivro1);
        });
        desktop.updateUI();
    }

    private void getTop10() {
        int posicao = 1;
        DefaultTableModel tabela = ((DefaultTableModel) tbTop10.getModel());
        tabela.setRowCount(0);
        ResultSet resultados = udao.getTop10();
        Object dados[] = new Object[3];
        try {
            while (resultados.next()) {
                dados[0] = posicao;
                dados[1] = resultados.getString("nome");
                dados[2] = resultados.getString("pontos");
                tabela.addRow(dados);
                posicao++;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
